generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Comment {
  id         String   @id @default(cuid())
  userId     String
  postId     String
  parentId   String
  replyForId String?
  content    String
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  Post       Post     @relation(fields: [postId], references: [id])
  Account   Account   @relation(fields: [userId], references: [id])
}

model Image {
  id     String @id
  url    String
  postId String
  Post   Post   @relation(fields: [postId], references: [id])
}

model Post {
  id                               String    @id @default(cuid())
  caption                          String?
  isHideLikeCounts                 Boolean
  isOffComment                     Boolean
  listImageURLs                    String[]
  aspectRatio                      Float
  authorId                         String
  createdAt                        DateTime  @default(now())
  updatedAt                        DateTime  @updatedAt
  Account Account   @relation("Post_authorIdToUserInfo", fields: [authorId], references: [id])
  listComments                          Comment[]
  listImages                            Image[]
  listLikedBy            Account[] @relation("UserLikedPost")
  listSavedBy            Account[] @relation("UserSavedPost")
}

model Account {
  id                           String     @id
  imageUrl                     String
  userName                     String
  biography                    String?
  isPrivate                    Boolean    @default(false)
  followedBy                   Follows[]  @relation("followedBy")
  following                    Follows[]  @relation("following")
  listComments                 Comment[]
  listPosts                    Post[]     @relation("Post_authorIdToUserInfo")
  listLikedPost                Post[]     @relation("UserLikedPost")
  listSavedPost                Post[]     @relation("UserSavedPost")
}

model Follows {
  followedBy      Account   @relation("followedBy", fields: [followedById], references: [id])
  followedById    String
  following       Account   @relation("following", fields: [followingId], references: [id])
  followingId     String

  @@id([followingId, followedById])
}